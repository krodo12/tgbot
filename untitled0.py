import telebot
import requests

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
BOT_TOKEN = '–≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'
# –¢–æ–∫–µ–Ω OpenWeatherMap API
OWM_API_KEY = '–≤—Å—Ç–∞–≤–∏—Ç—å API –∫–ª—é—á —Ç—É—Ç'


OWM_URL = "https://api.openweathermap.org/data/2.5/weather"
user_states = {}

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")

def send_weather(chat_id, city):
    try:
        params = {
            'q': city,
            'appid': OWM_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        res = requests.get(OWM_URL, params=params)
        data = res.json()

        if res.status_code != 200:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
            return

        temp = data['main']['temp']
        feels = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']
        desc = data['weather'][0]['description'].capitalize()

        reply = (f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                 f"{desc}\n"
                 f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
                 f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                 f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å")

        bot.send_message(chat_id, reply)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# === [–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø –†–ï–ñ–ò–ú–ê "/–ø–æ–≥–æ–¥–∞"] ===
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/–ø–æ–≥–æ–¥–∞"
#  –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –±–ª–æ–∫ "guess_city_weather", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
#@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/–ø–æ–≥–æ–¥–∞'))
#def handle_weather(message):
#    text = message.text.lower()
#    args = text.split(maxsplit=1)
#        if len(args) == 2:
#            city = args[1].strip().strip("<>").strip()
#            send_weather(message.chat.id, city)
#        else:
#            user_states[message.chat.id] = 'awaiting_city'
#            bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
#        return

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
#    if user_states.get(message.chat.id) == 'awaiting_city':
#        city = message.text.strip().strip("<>").strip()
#        send_weather(message.chat.id, city)
#        user_states.pop(message.chat.id, None)
#        return
#=========================
    
    # === [–ë–õ–û–ö –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ] ===
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
# –û–¢–ö–õ–Æ–ß–ò–¢–¨ —ç—Ç–æ—Ç –±–ª–æ–∫, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ "/–ø–æ–≥–æ–¥–∞"
@bot.message_handler(func=lambda m: True)
def guess_city_weather(message):
    text = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) < 2:
        return
    city = text
    send_weather(message.chat.id, city)
#=================================

       
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()